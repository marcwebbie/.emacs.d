;;; tdd-mode.el --- TDD Mode for running Python tests automatically -*- lexical-binding: t; -*-

;; Author: Marcwebbie <marcwebbie@gmail.com>
;; Version: 1.2
;; Keywords: python, testing, tdd
;; Package-Requires: ((emacs "24.3") (ansi-color "3.0") (f "0.20.0"))

;;; Commentary:
;;
;; TDD Mode enables a streamlined workflow for running tests within Python files.
;; Users can run the test at point, or a global test command, and automatically
;; re-run the last test whenever any .py file in the project is modified and saved.
;;
;; Supports `pytest`, `nosetests`, and `django test` with color-coded output.
;; Notifications indicate success or failure status after each test run.
;; A visual indicator in the fringe shows the status of the last test.

;;; Code:

(require 'ansi-color)
(require 'f)  ;; For file handling functions

(defvar tdd-mode-test-buffer "*tdd-output*"
  "Buffer name for displaying test output.")

(defvar tdd-mode-last-test-command nil
  "The last test command run by the user.")

(defvar tdd-mode-project-root nil
  "Root directory of the project being tracked by `tdd-mode`.")

(defvar tdd-mode-test-runner 'pytest
  "The test runner to use. Options are 'pytest, 'nosetests, and 'django.")

;; Define the fringe indicator overlay
(defvar tdd-mode-fringe-overlay nil
  "Overlay for displaying the test status in the fringe.")

;; Define fringe bitmap for the indicator
(define-fringe-bitmap 'tdd-mode-fringe-bar [#b11111111] nil nil '(center repeated))

(defun tdd-mode-get-project-root ()
  "Retrieve the project root for the current buffer."
  (or tdd-mode-project-root
      (setq tdd-mode-project-root (locate-dominating-file default-directory ".git"))))

(defun tdd-mode-get-test-command-at-point ()
  "Generate the test command for pytest with ClassName::test_function format at point."
  (let ((file-name (buffer-file-name))
        (function-name (which-function))
        (class-name (tdd-mode-get-class-name-at-point))  ;; New function to get class name
        (runner tdd-mode-test-runner))
    (cond
     ((eq runner 'pytest)
      (when (and file-name function-name)
        (if class-name
            ;; If a class name is found, include it in the test path
            (format "pytest --color=yes %s::%s::%s" file-name class-name function-name)
          ;; If no class name, use only the function name (for functions outside classes)
          (format "pytest --color=yes %s::%s" file-name function-name))))
     ((eq runner 'nosetests)
      (when (and file-name function-name)
        (format "nosetests %s:%s" file-name function-name)))
     ((eq runner 'django)
      (when file-name
        (format "python manage.py test %s" file-name)))
     (t (error "Unsupported test runner")))))

(defun tdd-mode-get-class-name-at-point ()
  "Get the class name at point if the cursor is within a Python class, otherwise nil."
  (save-excursion
    (let ((class-name nil))
      (while (and (not class-name) (re-search-backward "^\s*class\s+\\([A-Za-z0-9_]+\\)" nil t))
        (setq class-name (match-string 1)))
      class-name)))

(defun tdd-mode-run-test (&optional command)
  "Run the given test COMMAND or the last test if no COMMAND is provided."
  (interactive)
  (let ((test-command (or command tdd-mode-last-test-command)))
    (when test-command
      (setq tdd-mode-last-test-command test-command) ; Save last test command
      (with-current-buffer (get-buffer-create tdd-mode-test-buffer)
        (erase-buffer)
        (insert (concat "$ " test-command "\n\n"))
        (let ((exit-code (call-process-shell-command test-command nil tdd-mode-test-buffer t)))
          (tdd-mode-apply-ansi-color) ;; Apply ANSI colors to buffer
          (display-buffer tdd-mode-test-buffer)
          (tdd-mode-update-fringe-indicator exit-code)
          (tdd-mode-notify exit-code))))))

(defun tdd-mode-run-test-at-point ()
  "Run the test at point and save it as the last command."
  (interactive)
  (let ((command (tdd-mode-get-test-command-at-point)))
    (when command
      (tdd-mode-run-test command))))

(defun tdd-mode-apply-ansi-color ()
  "Apply ANSI color codes in the test buffer for improved readability."
  (with-current-buffer tdd-mode-test-buffer
    (ansi-color-apply-on-region (point-min) (point-max))))

(defun tdd-mode-notify (exit-code)
  "Send a notification based on the exit code of the test."
  (if (eq exit-code 0)
      (message "✅ Test passed!")
    (message "❌ Test failed!")))

(defun tdd-mode-update-fringe-indicator (exit-code)
  "Update the fringe indicator based on the EXIT-CODE of the test."
  (unless tdd-mode-fringe-overlay
    (setq tdd-mode-fringe-overlay (make-overlay (point-min) (point-min))))
  (let ((color (if (eq exit-code 0) "green" "red")))
    (overlay-put tdd-mode-fringe-overlay 'before-string
                 (propertize " " 'display `(left-fringe tdd-mode-fringe-bar ,color)))))

(defun tdd-mode-run-last-test-on-save ()
  "Re-run the last test command if a .py file in the project is saved."
  (when (and tdd-mode-last-test-command
             (tdd-mode-buffer-in-project-p (buffer-file-name)))
    (tdd-mode-run-test tdd-mode-last-test-command)))

(defun tdd-mode-buffer-in-project-p (file)
  "Check if FILE is within the project root."
  (let ((project-root (tdd-mode-get-project-root)))
    (and project-root
         (f-descendant-of-p file project-root)
         (string= (f-ext file) "py"))))

;;;###autoload
(define-minor-mode tdd-mode
  "Minor mode for TDD workflow with automatic test re-running."
  :lighter " TDD"
  :keymap (let ((map (make-sparse-keymap)))
            (define-key map (kbd "C-c t") 'tdd-mode-run-test-at-point)
            (define-key map (kbd "C-c T") 'tdd-mode-run-test)
            map)
  (if tdd-mode
      (progn
        (setq tdd-mode-project-root (tdd-mode-get-project-root))
        (add-hook 'after-save-hook 'tdd-mode-run-last-test-on-save))
    (remove-hook 'after-save-hook 'tdd-mode-run-last-test-on-save)
    (when tdd-mode-fringe-overlay
      (delete-overlay tdd-mode-fringe-overlay)
      (setq tdd-mode-fringe-overlay nil))))

(provide 'tdd-mode)

;;; tdd-mode.el ends here
